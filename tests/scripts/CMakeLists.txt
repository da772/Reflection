cmake_minimum_required(VERSION 3.12)

project(Scripts VERSION 1.0.0)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)


file(GLOB_RECURSE Scripts_SRC
"*.cpp"
"*.hpp"
"*.h")


add_library(${PROJECT_NAME} SHARED
 ${Scripts_SRC})

 target_include_directories(
    ${PROJECT_NAME} PUBLIC
    "../../include"
    "../include"
)


get_filename_component(PARENT_DIR ${PROJECT_SOURCE_DIR} DIRECTORY)

if(Win32 AND ${CMAKE_GENERATOR} MATCHES "Ninja")
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
        "${PROJECT_SOURCE_DIR}/bin/$<TARGET_FILE_NAME:${PROJECT_NAME}>"
       "${PARENT_DIR}/bin/$<TARGET_FILE_NAME:${PROJECT_NAME}>")
elseif (Win32)
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
        "${PROJECT_SOURCE_DIR}/bin/$<CONFIG>/$<TARGET_FILE_NAME:${PROJECT_NAME}>"
       "${PARENT_DIR}/bin/$<CONFIG>/$<TARGET_FILE_NAME:${PROJECT_NAME}>")
else ()
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
        "${PROJECT_SOURCE_DIR}/bin/$<CONFIG>/$<TARGET_FILE_NAME:${PROJECT_NAME}>"
       "${PARENT_DIR}/bin/$<CONFIG>/$<TARGET_FILE_NAME:${PROJECT_NAME}>")
endif (Win32 AND ${CMAKE_GENERATOR} MATCHES "Ninja")

if(Win32 AND ${CMAKE_GENERATOR} MATCHES "Ninja")
elseif (Win32)
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
COMMAND ${CMAKE_COMMAND} -E copy
        "${PROJECT_SOURCE_DIR}/bin/$<CONFIG>/${PROJECT_NAME}.pdb"
       "${PARENT_DIR}/bin/$<CONFIG>/${PROJECT_NAME}.pdb")
endif(Win32 AND ${CMAKE_GENERATOR} MATCHES "Ninja")
