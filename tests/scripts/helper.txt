
#include <iostream>
#include <cstdint>
#include <vector>

#define ADDR(x) reinterpret_cast<uintptr_t>(x)

#define UCLASS(x)
#define UCLASS_BODY(x)


	template<typename T, typename U> constexpr size_t offsetOf(U T::*member)
    {
        return (char*)&((T*)nullptr->*member) - (char*)nullptr;
    }

using namespace std;

template <typename T>
struct TestStruct {
    T v;
    int z;
    int q;
    T f;
};

UCLASS();
class Test {
    UCLASS_BODY();
  public:
    inline Test() {};
    inline ~Test() {};

  public:
    int z = 35;
    TestStruct<int> s = {64, 5 ,12, 82};
    uint64_t x = 15;
    int y = 22;
    std::vector<uint64_t> vec = {1, 2, 3, 4 ,5 ,6 ,7 ,8 ,9 ,10};
    char g = 'c';

};



int main()
{
    Test* t = new Test();

    uintptr_t offset =  - reinterpret_cast<uintptr_t>(t);

    uintptr_t offsets[] = {ADDR(&t->z), ADDR(&t->s),
    ADDR( (&t->x) ), ADDR( (&t->y)), ADDR((&t->vec)), ADDR((&t->g))};

    int offsetSize = sizeof(offsets)/sizeof(uintptr_t);

    for (int i = 0; i < offsetSize; i++) {
        std::cout << offsets[i] << " - " <<  (i < offsetSize-1 ? offsets[i+1]-offsets[i] : 0) << " - " << ADDR(t) <<std::endl;
    }

    uintptr_t vecOffset = offsets[offsetSize-2] - ADDR(t);

    std::cout << ((std::vector<uint64_t>*)((void*)t + vecOffset))->size() << std::endl;

    std::cout << offsetOf(&Test::vec) << std::endl;

    delete t;

    return 0;
}
